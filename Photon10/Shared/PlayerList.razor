<div class="w-50">

    @{
            rowCount = Team1Players.Count();
            if(Team2Players.Count() > rowCount)
            {
                rowCount = Team2Players.Count();
            }
            rowCount++;
        }
<table class="table">
    <thead>
        <tr>
            <th scope="col">Team One</th>
            <th scope="col">Team Two</th>
        </tr>
    </thead>
    <tbody>
        @for(int i = 0; i < rowCount; i++)
                {
                    <tr>
                        <td>
                            @if(i < Team1Players.Count())
                            {
                                <p>@Team1Players[i].Codename</p>
                            }
                            else if(i == Team1Players.Count())
                            {
                                <PlayerEntry ValueChanged=@(x => OnPlayerAddToSession(x,1))/>
                            }
                        </td>
                        <td>
                            @if(i < Team2Players.Count())
                            {
                                <p>@Team2Players[i].Codename</p>
                            }
                            else if(i == Team2Players.Count())
                            {
                                <PlayerEntry ValueChanged=@(x => OnPlayerAddToSession(x,2))/>
                            }
                        </td>
                    </tr>
                }
            </tbody>
</table>
</div>

@inject IDbContextFactory<PlayerDbContext> DbFactory
@code
{
    //This could work well further componented... componentalized? subcomponented? MAKE MORE COMPONENTS!

    //following code is how to do ops against the database. var context is used each time. line below is query to get back a list.
    //  var context = DbFactory.CreateDbContext();
    //  Penalties = context.Penalties.Where<Penalty>(x => x.UserId == User.Id).ToList<Penalty>();
    private int rowCount;

    //TODO: Create Single collection for life of game containing player & data for team, score, etc.
    private List<Models.Player> Team1Players { get; set; }
    private List<Models.Player> Team2Players { get; set; }

    private void OnPlayerAddToSession(Models.Player player, int team)
    {
        //Make sure player has not already been added to game.
        //TODO: optimize
        //TODO: display feedback to client on failure

        if(Team1Players.Where(x => x.Id == player.Id).Count() > 0 || Team2Players.Where(x => x.Id == player.Id).Count() > 0)
        {
            return;
        }
        if(team == 1)
        {
            Team1Players.Add(player);
        }
        else
        {
            Team2Players.Add(player);
        }
    }
    protected override Task OnInitializedAsync()
    { //TODO: Check for existing game for circuit and restore if still live
        Team1Players = new();
        Team2Players = new();
        rowCount = 0;
        return base.OnInitializedAsync();
    }
 }