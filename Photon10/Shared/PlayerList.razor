<div class="w-100">

    @{
        rowCount = Team1Players.Count();
        if (Team2Players.Count() > rowCount)
        {
            rowCount = Team2Players.Count();
        }
        rowCount++;
    }
    <table class="table table-dark table-bordered w-100">
        <thead>
            <tr>
                <th scope="col" class= "red_team text-center">alpha red</th>
                <th scope="col" class= "grn_team text-center">alpha grn</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < rowCount; i++)
            {
                <tr>
                    <td class="red_team">
                        @if (i < Team1Players.Count())
                        {
                            <p>@Team1Players[i].Codename</p>
                        }
                        else if (i == Team1Players.Count())
                        {
                            if (AllowAddingPlayers)
                            {

                                <PlayerEntry ValueChanged=@(x => OnPlayerAddToSession(x,1)) />
                            }
                            else
                            {
                                <p>No Players In Team</p>
                            }
                        }
                    </td>
                    <td class="grn_team">
                        @if (i < Team2Players.Count())
                        {
                            <p>@Team2Players[i].Codename</p>
                        }
                        else if (i == Team2Players.Count())
                        {
                            if (AllowAddingPlayers)
                            {

                                <PlayerEntry ValueChanged=@(x => OnPlayerAddToSession(x,2)) />
                            }
                            else
                            {
                                <p>No Players In Team</p>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@inject IDbContextFactory<PlayerDbContext> DbFactory
@code
{
    //This could work well further componented... componentalized? subcomponented? MAKE MORE COMPONENTS!

    //following code is how to do ops against the database. var context is used each time. line below is query to get back a list.
    //  var context = DbFactory.CreateDbContext();
    //  Penalties = context.Penalties.Where<Penalty>(x => x.UserId == User.Id).ToList<Penalty>();
    private int rowCount;

    //TODO: Create Single collection for life of game containing player & data for team, score, etc.
    [Parameter]
    public List<Models.Player> Team1Players { get; set; } = new();
    [Parameter]
    public List<Models.Player> Team2Players { get; set; } = new();
    /*
    [Parameter]
    public EventCallback Team1PlayersChanged { get; set; }
    [Parameter]
    public EventCallback Team2PlayersChanged { get; set; }
    */
    [Parameter]
    public bool AllowAddingPlayers { get; set; } = false;

    private void OnPlayerAddToSession(Models.Player player, int team)
    {
        //Make sure player has not already been added to game.
        //TODO: optimize
        //TODO: display feedback to client on failure

        if (Team1Players.Where(x => x.Id == player.Id).Count() > 0 || Team2Players.Where(x => x.Id == player.Id).Count() > 0)
        {
            return;
        }
        if (team == 1)
        {
            Team1Players.Add(player);
            //Team1PlayersChanged.InvokeAsync();
        }
        else
        {
            Team2Players.Add(player);
            //Team2PlayersChanged.InvokeAsync();
        }
    }
    protected override Task OnInitializedAsync()
    { //TODO: Check for existing game for circuit and restore if still live
        rowCount = 0;
        return base.OnInitializedAsync();
    }
 }